repos:
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.13.0
    hooks:
      - id: mypy
        name: mypy-type-check
        args: [--ignore-missing-imports, --show-error-codes, --explicit-package-bases]
        additional_dependencies: [types-requests]
        exclude: |
          (?x)^(
            venv/.*|
            .venv/.*|
            .tox/.*|
            .*/migrations/.*|
            playlist_etl/.*|
            .*test.*\.py$
          )$

  - repo: https://github.com/astral-sh/ruff-pre-commit
    # Ruff version.
    rev: v0.8.4
    hooks:
      # First check for linting issues (fail if found)
      - id: ruff
        name: ruff-check
        args: [--no-fix]
        exclude: ".*\\.ipynb$"
      # Then run the linter with aggressive fixes.
      - id: ruff
        name: ruff-fix
        args: [--fix, --unsafe-fixes]
        exclude: ".*\\.ipynb$"
      # Run the formatter.
      - id: ruff-format
        exclude: ".*\\.ipynb$"

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      # - id: check-yaml
      - id: check-added-large-files
      - id: check-merge-conflict
      - id: check-toml

  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.3
    hooks:
      - id: prettier
        files: \.(js|jsx|ts|tsx|json|css|scss|md|html)$
        exclude: |
          (?x)^(
            node_modules/.*|
            venv/.*|
            .tox/.*|
            staticfiles/.*
          )$

  - repo: local
    hooks:
      - id: clear-python-cache
        name: Clear Python cache files
        entry: bash -c "find . -name '__pycache__' -type d -exec rm -rf {} + 2>/dev/null || true; find . -name '*.pyc' -delete 2>/dev/null || true; rm -rf .mypy_cache 2>/dev/null || true"
        language: system
        pass_filenames: false
        always_run: true

      - id: django-check
        name: Django initialization check
        entry: bash -c "cd django_backend && PYTHONPATH=.. python manage.py check --deploy"
        language: system
        pass_filenames: false
        files: ^django_backend/.*\.py$

      - id: django-import-check
        name: Django management command import test
        entry: bash -c "cd django_backend && PYTHONPATH=.. DJANGO_SETTINGS_MODULE=core.settings python -c 'import django; django.setup(); from core.management.commands import a_playlist_etl, view_count_main, e_playlist_service_track, f_track; print(\"âœ… All management commands import successfully\")'"
        language: system
        pass_filenames: false
        files: ^django_backend/core/management/commands/.*\.py$

      - id: check-pip-dependencies
        name: Check pip dependency compatibility
        entry: python -m pip install --dry-run -r requirements.txt
        language: system
        files: requirements\.txt$
        pass_filenames: false
        verbose: false

      - id: python-import-check
        name: Python import validation
        entry: python -m py_compile
        language: system
        files: \.py$
        exclude: |
          (?x)^(
            venv/.*|
            .venv/.*|
            .tox/.*|
            migrations/.*
          )$
