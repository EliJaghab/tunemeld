name: PostgreSQL Raw Data Extract

on:
  schedule:
    # Run every Saturday at 2 AM UTC
    - cron: '0 2 * * 6'
  workflow_dispatch:
    # Allow manual trigger

jobs:
  extract-raw-data:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Chrome and ChromeDriver
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable
          install-chromedriver: true

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          RAILWAY_ENVIRONMENT: production
        run: |
          cd django_backend
          python manage.py migrate

      - name: Run raw data extraction
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
          RAILWAY_ENVIRONMENT: production
        run: |
          cd django_backend
          python manage.py raw_extract

      - name: Verify data extraction
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        run: |
          cd django_backend
          echo "Checking raw playlist data count..."
          python manage.py shell -c "
          from core.models import RawPlaylistData, Genre, Service
          print(f'Total raw playlist records: {RawPlaylistData.objects.count()}')
          print(f'Genres: {Genre.objects.count()}')
          print(f'Services: {Service.objects.count()}')
          for service in Service.objects.all():
              count = RawPlaylistData.objects.filter(service=service).count()
              print(f'{service.name}: {count} playlists')
          "

      - name: Log extraction summary
        run: |
          echo "âœ… Raw data extraction completed successfully"
          echo "ðŸ“Š Data has been persisted to Railway PostgreSQL"
          echo "ðŸ”„ Next extraction scheduled for next Saturday at 2 AM UTC"
