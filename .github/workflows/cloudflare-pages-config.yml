name: Update Cloudflare Pages Configuration

on:
  push:
    branches:
      - master
    paths:
      - ".github/workflows/cloudflare-pages-config.yml"
  workflow_dispatch:

jobs:
  update-config:
    runs-on: ubuntu-latest
    name: Update Cloudflare Pages Configuration

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update Cloudflare Pages Project Settings
        run: |
          # Check if required secrets are available
          if [ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then
            echo "Error: CLOUDFLARE_ACCOUNT_ID secret is not set"
            exit 1
          fi

          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "Error: CLOUDFLARE_API_TOKEN secret is not set"
            exit 1
          fi

          # Inline configuration values
          BUILD_COMMAND="cd frontend && npm ci && npm run build"
          BUILD_OUTPUT_DIR="frontend/dist"
          ROOT_DIR="/"

          echo "Build command: $BUILD_COMMAND"
          echo "Output dir: $BUILD_OUTPUT_DIR"
          echo "Root dir: $ROOT_DIR"

          # Update Cloudflare Pages project settings via API
          response=$(curl -s -X PATCH "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/pages/projects/tunemeld" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{
              "build_config": {
                "build_command": "'$BUILD_COMMAND'",
                "destination_dir": "'$BUILD_OUTPUT_DIR'",
                "root_dir": "'$ROOT_DIR'",
                "web_analytics_tag": null,
                "web_analytics_token": null
              }
            }')

          # Check if the response indicates success
          if echo "$response" | jq -e '.success == true' > /dev/null; then
            echo "Successfully updated Cloudflare Pages configuration"
          else
            echo "Failed to update Cloudflare Pages configuration"
            echo "$response" | jq -r '.errors[]?.message // "Unknown error"'
            exit 1
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
