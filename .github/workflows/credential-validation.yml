name: Credential Validation

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC to catch expired credentials
    - cron: '0 2 * * 0'

jobs:
  validate-production-credentials:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pymongo spotipy

    - name: Validate production credentials
      env:
        # Django
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

        # MongoDB
        MONGO_URI: ${{ secrets.MONGO_URI }}
        MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
        MONGO_DATA_API_KEY: ${{ secrets.MONGO_DATA_API_KEY }}
        MONGO_DATA_API_ENDPOINT: ${{ secrets.MONGO_DATA_API_ENDPOINT }}

        # Spotify
        SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
        SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}

        # YouTube
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

        # RapidAPI
        X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}

        # Cloudflare
        CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        CF_NAMESPACE_ID: ${{ secrets.CF_NAMESPACE_ID }}

        # Railway
        RAILWAY_API_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}

      run: |
        python scripts/validate_credentials.py

    - name: Validate Railway deployment health
      if: success()
      env:
        BACKEND_URL: https://api.tunemeld.com
      run: |
        echo "üîç Checking Railway deployment health..."

        # Test Django health endpoint
        if curl -f -s "${BACKEND_URL}/health" > /dev/null; then
          echo "‚úÖ Django backend is healthy"
        else
          echo "‚ùå Django backend health check failed"
          exit 1
        fi

        # Test backend connectivity
        if curl -f -s -o /dev/null -w "%{http_code}" "${BACKEND_URL}/health" | grep -q "200"; then
          echo "‚úÖ Backend returns 200 status"
        else
          echo "‚ùå Backend health check returned non-200 status"
          exit 1
        fi

    - name: Validate MongoDB production connectivity
      if: success()
      env:
        MONGO_URI: ${{ secrets.MONGO_URI }}
        MONGO_DB_NAME: ${{ secrets.MONGO_DB_NAME }}
      run: |
        echo "üîç Testing MongoDB production connectivity..."
        python -c "
        import pymongo
        import os
        import sys

        try:
            client = pymongo.MongoClient(os.environ['MONGO_URI'], serverSelectionTimeoutMS=10000)
            client.admin.command('ismaster')

            db = client[os.environ['MONGO_DB_NAME']]
            collections = db.list_collection_names()

            print('‚úÖ MongoDB connected successfully')
            print(f'‚úÖ Database {os.environ[\"MONGO_DB_NAME\"]} accessible')
            print(f'‚úÖ Found {len(collections)} collections')

        except Exception as e:
            print(f'‚ùå MongoDB connection failed: {e}')
            sys.exit(1)
        "

    - name: Notify on credential expiry
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'üö® Production Credential Validation Failed',
            body: `
            ## Production Credential Validation Failed

            The weekly credential validation check has failed. This could indicate:

            - Expired API keys or tokens
            - Changed API endpoints or authentication methods
            - Network connectivity issues
            - Service outages

            **Action Required:**
            1. Check the [failed workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            2. Verify all production secrets in GitHub repository settings
            3. Test credential connectivity manually
            4. Update expired credentials immediately

            **Impact:**
            - Production deployment may be affected
            - API integrations may not work properly
            - Users may experience service disruptions

            **Priority:** High - Please investigate immediately
            `,
            labels: ['bug', 'production', 'credentials', 'high-priority']
          })
