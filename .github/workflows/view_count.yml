name: Historical Track View Count ETL

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      clear_view_count_cache:
        description: 'Clear view count cache before running ETL'
        required: false
        default: false
        type: boolean

jobs:
  run-etl:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Setup Chrome and ChromeDriver
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable
          install-chromedriver: true

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Pre-migration database safety check
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_NAMESPACE_ID: ${{ secrets.CF_NAMESPACE_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: make ci-db-safety-check

      - name: Apply database migrations to Railway PostgreSQL
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_NAMESPACE_ID: ${{ secrets.CF_NAMESPACE_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: make ci-db-migrate

      - name: Clear view count cache (conditional)
        if: ${{ inputs.clear_view_count_cache == true }}
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_NAMESPACE_ID: ${{ secrets.CF_NAMESPACE_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          echo "🗑️ Clearing view count cache..."
          cd backend
          python manage.py shell -c "
          from core.utils.cache_utils import clear_cache_by_prefix, CachePrefix
          view_count_cleared = clear_cache_by_prefix(CachePrefix.GQL_VIEW_COUNT)
          print(f'✅ Cleared {view_count_cleared} view count cache entries')
          "

      - name: Run Historical Track View Count ETL
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_NAMESPACE_ID: ${{ secrets.CF_NAMESPACE_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          cd backend
          python manage.py a_view_count

      - name: Verify ETL pipeline results
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        run: |
          cd backend
          echo " Historical Track View Count ETL Results:"
          python manage.py shell -c "
          from core.models.z_view_counts import HistoricalTrackViewCount
          from core.models.b_genre_service import Service
          print(f'Historical track view count records: {HistoricalTrackViewCount.objects.count()}')
          print()
          print(' Breakdown by service:')
          for service in Service.objects.all():
              count = HistoricalTrackViewCount.objects.filter(service=service).count()
              if count > 0:
                  print(f'{service.name}: {count} historical view count records')
          "

      - name: Post-ETL database validation
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_NAMESPACE_ID: ${{ secrets.CF_NAMESPACE_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: make ci-db-validate

      - name: Log ETL completion
        run: |
          echo " Historical Track View Count ETL Pipeline completed successfully"
          echo "  Data persisted to Railway PostgreSQL database"
          echo " Next ETL run scheduled for tomorrow at 2 AM UTC"
