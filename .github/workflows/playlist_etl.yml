name: Playlist ETL

on:
  schedule:
    - cron: "30 2 * * *"  # Daily at 2:30 AM UTC
  push:
    paths:
      - "backend/core/management/commands/playlist_etl_modules/**"
      - "backend/core/management/commands/playlist_etl.py"
  pull_request:
    paths:
      - "backend/core/management/commands/playlist_etl_modules/**"
      - "backend/core/management/commands/playlist_etl.py"
  workflow_dispatch:
    inputs:
      clear_gql_cache:
        description: "Clear GraphQL playlist cache only"
        required: false
        default: false
        type: boolean
      force_refresh:
        description: "Force refresh by skipping RapidAPI cache and pulling fresh data"
        required: false
        default: false
        type: boolean

jobs:
  run-etl:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[etl]

      - name: Setup Chrome and ChromeDriver
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable
          install-chromedriver: true


      - name: Pre-migration database safety check
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_NAMESPACE_ID: ${{ secrets.CF_NAMESPACE_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: make ci-db-safety-check

      - name: Apply database migrations to production PostgreSQL
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_NAMESPACE_ID: ${{ secrets.CF_NAMESPACE_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: make ci-db-migrate

      - name: Run Playlist ETL Pipeline
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          X_RAPIDAPI_KEY_A: ${{ secrets.X_RAPIDAPI_KEY_A }}
          X_RAPIDAPI_KEY_B: ${{ secrets.X_RAPIDAPI_KEY_B }}
          X_RAPIDAPI_KEY_C: ${{ secrets.X_RAPIDAPI_KEY_C }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_NAMESPACE_ID: ${{ secrets.CF_NAMESPACE_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          if [ "${{ inputs.force_refresh }}" = "true" ]; then
            make run-playlist-etl-force-refresh
          else
            make run-playlist-etl
          fi

      - name: Verify ETL pipeline results
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        run: |
          cd backend
          echo " ETL Pipeline Results:"
          python manage.py shell -c "
          from core.models import RawPlaylistDataModel, TrackModel, ServiceTrackModel, PlaylistModel, GenreModel, ServiceModel
          print(f'Raw playlist records: {RawPlaylistDataModel.objects.count()}')
          print(f'Unique tracks: {TrackModel.objects.count()}')
          print(f'Service track entries: {ServiceTrackModel.objects.count()}')
          print(f'Service playlists: {PlaylistModel.objects.count()}')
          print(f'Genres: {GenreModel.objects.count()}')
          print(f'Services: {ServiceModel.objects.count()}')
          print()
          print(' Breakdown by service:')
          for service in ServiceModel.objects.all():
              playlist_count = PlaylistModel.objects.filter(service=service).count()
              track_count = ServiceTrackModel.objects.filter(service=service).count()
              print(f'{service.name}: {playlist_count} playlists, {track_count} tracks')
          "

      - name: Post-ETL database validation
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_NAMESPACE_ID: ${{ secrets.CF_NAMESPACE_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: make ci-db-validate

      - name: Log ETL completion
        run: |
          echo " PostgreSQL ETL Pipeline completed successfully"
          echo "  Data persisted to production PostgreSQL database"
          echo " Next ETL run scheduled for tomorrow at 2:30 AM UTC"
