name: Playlist ETL

on:
  schedule:
    - cron: '0 17 * * 6'
  workflow_dispatch:

jobs:
  run-etl:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install system dependencies (FFmpeg for SpotDL)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Chrome and ChromeDriver
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable
          install-chromedriver: true

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Run Playlist ETL Pipeline
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          X_RAPIDAPI_KEY: ${{ secrets.X_RAPIDAPI_KEY }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
          SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_NAMESPACE_ID: ${{ secrets.CF_NAMESPACE_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          cd django_backend
          python manage.py playlist_etl_main

      - name: Verify ETL pipeline results
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        run: |
          cd django_backend
          echo "üìä ETL Pipeline Results:"
          python manage.py shell -c "
          from core.models import RawPlaylistData, Track, ServiceTrack, PlaylistModel, Genre, Service
          print(f'Raw playlist records: {RawPlaylistData.objects.count()}')
          print(f'Unique tracks: {Track.objects.count()}')
          print(f'Service track entries: {ServiceTrack.objects.count()}')
          print(f'Service playlists: {PlaylistModel.objects.count()}')
          print(f'Genres: {Genre.objects.count()}')
          print(f'Services: {Service.objects.count()}')
          print()
          print('üìà Breakdown by service:')
          for service in Service.objects.all():
              playlist_count = PlaylistModel.objects.filter(service=service).count()
              track_count = ServiceTrack.objects.filter(service=service).count()
              print(f'{service.name}: {playlist_count} playlists, {track_count} tracks')
          "

      - name: Log ETL completion
        run: |
          echo "‚úÖ PostgreSQL ETL Pipeline completed successfully"
          echo "üóÑÔ∏è  Data persisted to Railway PostgreSQL database"
          echo "üîÑ Next ETL run scheduled for next Saturday at 5 PM UTC"
