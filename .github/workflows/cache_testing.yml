name: Redis Cache Testing

on:
  push:
    branches: [ master, main ]
    paths:
      - 'django_backend/**'
      - '.github/workflows/cache_testing.yml'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'django_backend/**'
      - '.github/workflows/cache_testing.yml'
  schedule:
    # Run daily at 6 AM UTC to ensure cache infrastructure is healthy
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Allow manual trigger for debugging

jobs:
  cache-tests:
    runs-on: ubuntu-latest

    # Service containers for Redis
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd django_backend
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov

    - name: Verify Redis connection
      run: |
        # Test Redis connection
        redis-cli -h localhost -p 6379 ping
        redis-cli -h localhost -p 6379 info server

    - name: Set up environment variables
      run: |
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "RAILWAY_ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV

    - name: Run cache-specific tests
      run: |
        cd django_backend
        python -m pytest core/tests.py::RedisCacheTestCase -v --tb=short

    - name: Run all Django tests with cache
      run: |
        cd django_backend
        python -m pytest core/tests.py -v --tb=short --cov=core --cov-report=term-missing

    - name: Test cache endpoints manually
      run: |
        cd django_backend
        # Start Django server in background
        python manage.py runserver 0.0.0.0:8000 &
        SERVER_PID=$!

        # Wait for server to start
        sleep 5

        # Test cache status endpoint
        echo "Testing cache status endpoint..."
        curl -f http://localhost:8000/cache-status/ || exit 1

        # Test cache debug endpoint
        echo "Testing cache debug endpoint..."
        curl -f http://localhost:8000/cache-debug/ || exit 1

        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f http://localhost:8000/health/ || exit 1

        # Clean up
        kill $SERVER_PID

    - name: Test cache performance
      run: |
        cd django_backend
        python -c "
import os
import time
import django
from django.conf import settings

# Configure Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from core.cache_utils import CacheManager

# Performance test
print('Running cache performance tests...')

# Test write performance
start_time = time.time()
for i in range(100):
    CacheManager.set(f'perf_test_{i}', {'data': f'value_{i}'}, 60)
write_time = time.time() - start_time
print(f'Write performance: {write_time:.2f}s for 100 operations')

# Test read performance
start_time = time.time()
for i in range(100):
    CacheManager.get(f'perf_test_{i}')
read_time = time.time() - start_time
print(f'Read performance: {read_time:.2f}s for 100 operations')

# Clean up
for i in range(100):
    CacheManager.delete(f'perf_test_{i}')

print('Cache performance tests completed successfully!')
"

    - name: Test cache with Railway-like environment
      run: |
        cd django_backend
        # Simulate Railway environment
        export RAILWAY_ENVIRONMENT=production
        export REDIS_URL=redis://localhost:6379/1

        python -c "
import os
import django
from django.conf import settings

# Configure Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from core.cache_utils import CacheManager

# Test production-like configuration
print('Testing production-like cache configuration...')

# Verify cache configuration
cache_status = CacheManager.get_cache_status()
print(f'Cache connected: {cache_status["connected"]}')
print(f'Cache backend: {cache_status["backend"]}')

# Test basic operations
test_key = 'railway_test'
test_data = {'environment': 'production', 'timestamp': '2025-01-01'}
CacheManager.set(test_key, test_data, 300)
retrieved = CacheManager.get(test_key)
assert retrieved == test_data, 'Cache data mismatch'

# Clean up
CacheManager.delete(test_key)
print('Production-like cache test completed successfully!')
"

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cache-test-results-${{ matrix.python-version }}
        path: |
          django_backend/htmlcov/
          django_backend/.coverage

  integration-tests:
    runs-on: ubuntu-latest
    needs: cache-tests

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd django_backend
        pip install -r requirements.txt
        pip install pytest pytest-django requests

    - name: Set up environment variables
      run: |
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "RAILWAY_ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-integration" >> $GITHUB_ENV

    - name: Run integration tests
      run: |
        cd django_backend
        python -c "
import os
import time
import requests
import subprocess
import django
from django.conf import settings

# Configure Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from core.cache_utils import CacheManager

print('Running comprehensive integration tests...')

# Test 1: Cache persistence across requests
print('Test 1: Cache persistence...')
test_key = 'integration_test_persistence'
test_data = {'test': 'persistence', 'timestamp': time.time()}
CacheManager.set(test_key, test_data, 300)

# Verify data persists
retrieved = CacheManager.get(test_key)
assert retrieved == test_data, 'Cache persistence failed'
print('✓ Cache persistence test passed')

# Test 2: Cache invalidation
print('Test 2: Cache invalidation...')
genre = 'integration_test_genre'
CacheManager.set(f'{CacheManager.GRAPH_DATA_PREFIX}:{genre}', {'data': 'test'}, 300)
CacheManager.set(f'{CacheManager.PLAYLIST_DATA_PREFIX}:{genre}', {'data': 'test'}, 300)

# Verify data is cached
assert CacheManager.get(f'{CacheManager.GRAPH_DATA_PREFIX}:{genre}') is not None
assert CacheManager.get(f'{CacheManager.PLAYLIST_DATA_PREFIX}:{genre}') is not None

# Invalidate cache
CacheManager.invalidate_genre_cache(genre)

# Verify data is cleared
assert CacheManager.get(f'{CacheManager.GRAPH_DATA_PREFIX}:{genre}') is None
assert CacheManager.get(f'{CacheManager.PLAYLIST_DATA_PREFIX}:{genre}') is None
print('✓ Cache invalidation test passed')

# Test 3: Cache timeouts
print('Test 3: Cache timeouts...')
timeout_key = 'integration_timeout_test'
CacheManager.set(timeout_key, {'data': 'timeout_test'}, 1)  # 1 second timeout

# Verify immediate retrieval
assert CacheManager.get(timeout_key) is not None
print('✓ Immediate retrieval works')

# Wait for timeout
time.sleep(2)

# Verify timeout
assert CacheManager.get(timeout_key) is None
print('✓ Cache timeout test passed')

# Test 4: Multiple data types
print('Test 4: Multiple data types...')
test_cases = [
    ('string_test', 'string_value'),
    ('int_test', 42),
    ('float_test', 3.14),
    ('bool_test', True),
    ('list_test', [1, 2, 3]),
    ('dict_test', {'nested': {'data': 'value'}}),
    ('none_test', None),
]

for key, value in test_cases:
    CacheManager.set(key, value, 60)
    retrieved = CacheManager.get(key)
    assert retrieved == value, f'Data type test failed for {key}'
    CacheManager.delete(key)

print('✓ Multiple data types test passed')

print('All integration tests completed successfully!')
"

    - name: Test cache under load
      run: |
        cd django_backend
        python -c "
import os
import time
import threading
import django
from django.conf import settings

# Configure Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from core.cache_utils import CacheManager

print('Running cache load test...')

# Load test parameters
NUM_THREADS = 10
OPERATIONS_PER_THREAD = 50
results = []

def cache_worker(thread_id):
    success_count = 0
    for i in range(OPERATIONS_PER_THREAD):
        key = f'load_test_{thread_id}_{i}'
        data = {'thread': thread_id, 'operation': i, 'timestamp': time.time()}

        # Set operation
        if CacheManager.set(key, data, 60):
            # Get operation
            retrieved = CacheManager.get(key)
            if retrieved == data:
                success_count += 1

            # Delete operation
            CacheManager.delete(key)

    results.append(success_count)

# Start threads
threads = []
start_time = time.time()

for i in range(NUM_THREADS):
    thread = threading.Thread(target=cache_worker, args=(i,))
    threads.append(thread)
    thread.start()

# Wait for all threads
for thread in threads:
    thread.join()

end_time = time.time()
total_operations = NUM_THREADS * OPERATIONS_PER_THREAD
successful_operations = sum(results)

print(f'Load test completed in {end_time - start_time:.2f} seconds')
print(f'Total operations: {total_operations}')
print(f'Successful operations: {successful_operations}')
print(f'Success rate: {successful_operations / total_operations * 100:.1f}%')

# Verify success rate is acceptable
assert successful_operations / total_operations >= 0.95, 'Cache load test failed - success rate too low'
print('✓ Cache load test passed')
"

  notify:
    runs-on: ubuntu-latest
    needs: [cache-tests, integration-tests]
    if: always()

    steps:
    - name: Notify success
      if: needs.cache-tests.result == 'success' && needs.integration-tests.result == 'success'
      run: |
        echo "🎉 All cache tests passed successfully!"
        echo "✅ Redis cache infrastructure is working correctly"
        echo "✅ Integration tests completed successfully"

    - name: Notify failure
      if: needs.cache-tests.result == 'failure' || needs.integration-tests.result == 'failure'
      run: |
        echo "❌ Cache tests failed!"
        echo "Cache tests result: ${{ needs.cache-tests.result }}"
        echo "Integration tests result: ${{ needs.integration-tests.result }}"
        exit 1
