# Generated by Django 4.2.23 on 2025-08-13 01:08

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ETLRun',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('run_type', models.CharField(choices=[('full', 'Full ETL'), ('incremental', 'Incremental Update'), ('view_count', 'View Count Update'), ('historical', 'Historical Data Update')], help_text='Type of ETL run', max_length=20)),
                ('status', models.CharField(choices=[('running', 'Running'), ('success', 'Success'), ('failed', 'Failed'), ('partial', 'Partial Success')], default='running', help_text='Current status of the run', max_length=10)),
                ('started_at', models.DateTimeField(auto_now_add=True, help_text='When the ETL run started')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the ETL run completed', null=True)),
                ('records_processed', models.IntegerField(default=0, help_text='Number of records processed')),
                ('errors', models.IntegerField(default=0, help_text='Number of errors encountered')),
                ('error_details', models.TextField(blank=True, help_text='Details of any errors encountered')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata about the run')),
            ],
            options={
                'db_table': 'etl_runs',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Internal genre identifier (e.g., 'dance', 'rap', 'country', 'pop')", max_length=50, unique=True)),
                ('display_name', models.CharField(help_text='Human-readable genre name for UI', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'genres',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalViewCount',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('total_view_count', models.BigIntegerField(blank=True, help_text='Total cumulative views at this point in time', null=True)),
                ('delta_view_count', models.BigIntegerField(blank=True, help_text='Change in views since last measurement', null=True)),
                ('timestamp', models.DateTimeField(help_text='When this snapshot was taken')),
            ],
            options={
                'db_table': 'historical_view_counts',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('playlist_type', models.CharField(choices=[('service', 'Service Playlist'), ('aggregate', 'Aggregate Playlist')], default='service', help_text='Type of playlist - service-specific or aggregate', max_length=10)),
                ('name', models.CharField(blank=True, help_text='Playlist name for display', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'playlists',
            },
        ),
        migrations.CreateModel(
            name='PlaylistMetadata',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('last_snapshot_id', models.CharField(blank=True, help_text='Service-specific snapshot/version identifier', max_length=255)),
                ('total_tracks', models.IntegerField(default=0, help_text='Total number of tracks in playlist')),
                ('last_updated', models.DateTimeField(help_text='When playlist was last fetched from service')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional service-specific metadata')),
            ],
            options={
                'db_table': 'playlist_metadata',
            },
        ),
        migrations.CreateModel(
            name='RawPlaylistData',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('data', models.JSONField(help_text='Raw JSON data from service API')),
                ('processed', models.BooleanField(default=False, help_text='Whether this data has been processed by ETL')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, help_text='When this data was processed', null=True)),
            ],
            options={
                'db_table': 'raw_playlist_data',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Service identifier (e.g., 'Spotify', 'AppleMusic', 'SoundCloud', 'YouTube')", max_length=50, unique=True)),
                ('display_name', models.CharField(help_text='Human-readable service name for UI', max_length=100)),
                ('is_track_source', models.BooleanField(default=False, help_text='True if this service provides track/playlist data')),
                ('is_data_source', models.BooleanField(default=False, help_text='True if this service provides view count data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'services',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('isrc', models.CharField(help_text="International Standard Recording Code (e.g., 'USSM12345678')", max_length=12, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator('^[A-Z]{2}[A-Z0-9]{3}[0-9]{7}$', 'Invalid ISRC format')])),
                ('youtube_url', models.URLField(blank=True, help_text='YouTube video URL for this track', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('primary_artist', models.CharField(blank=True, help_text='Primary artist name (aggregated from services)', max_length=255)),
                ('primary_title', models.CharField(blank=True, help_text='Primary track title (aggregated from services)', max_length=255)),
            ],
            options={
                'db_table': 'tracks',
            },
        ),
        migrations.CreateModel(
            name='ViewCount',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('view_count', models.BigIntegerField(blank=True, help_text='Total view/play count', null=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, help_text='When this count was recorded')),
                ('service', models.ForeignKey(help_text='Service where views were counted', on_delete=django.db.models.deletion.CASCADE, to='core.service')),
                ('track', models.ForeignKey(help_text='Track these views belong to', on_delete=django.db.models.deletion.CASCADE, related_name='view_counts', to='core.track')),
            ],
            options={
                'db_table': 'view_counts',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TrackPlaylist',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('rank', models.IntegerField(help_text='Position in playlist (1 = top track)')),
                ('raw_aggregate_rank', models.FloatField(blank=True, help_text='Weighted average rank for aggregate playlists', null=True)),
                ('sources', models.JSONField(blank=True, default=dict, help_text="Service rankings for aggregate playlists (e.g., {'Spotify': 1, 'AppleMusic': 5})")),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('playlist', models.ForeignKey(help_text='The playlist containing this track', on_delete=django.db.models.deletion.CASCADE, to='core.playlist')),
                ('track', models.ForeignKey(help_text='The track in this playlist', on_delete=django.db.models.deletion.CASCADE, to='core.track')),
            ],
            options={
                'db_table': 'track_playlists',
                'ordering': ['rank'],
            },
        ),
        migrations.CreateModel(
            name='TrackData',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('track_name', models.CharField(blank=True, help_text='Track title as shown on this service', max_length=255, null=True)),
                ('artist_name', models.CharField(blank=True, help_text='Artist name as shown on this service', max_length=255, null=True)),
                ('track_url', models.URLField(blank=True, help_text='Direct URL to track on this service', null=True)),
                ('album_cover_url', models.URLField(blank=True, help_text='Album artwork URL from this service', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(help_text='The service this data comes from', on_delete=django.db.models.deletion.CASCADE, to='core.service')),
                ('track', models.ForeignKey(help_text='The track this data belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='track_data', to='core.track')),
            ],
            options={
                'db_table': 'track_data',
            },
        ),
        migrations.AddIndex(
            model_name='track',
            index=models.Index(fields=['created_at'], name='tracks_created_d6ab33_idx'),
        ),
        migrations.AddIndex(
            model_name='track',
            index=models.Index(fields=['updated_at'], name='tracks_updated_2168a7_idx'),
        ),
        migrations.AddField(
            model_name='rawplaylistdata',
            name='genre',
            field=models.ForeignKey(help_text='Genre of this playlist data', on_delete=django.db.models.deletion.CASCADE, to='core.genre'),
        ),
        migrations.AddField(
            model_name='rawplaylistdata',
            name='service',
            field=models.ForeignKey(help_text='Service this data came from', on_delete=django.db.models.deletion.CASCADE, to='core.service'),
        ),
        migrations.AddField(
            model_name='playlistmetadata',
            name='playlist',
            field=models.OneToOneField(help_text='The playlist this metadata belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='core.playlist'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='genre',
            field=models.ForeignKey(help_text='Music genre of this playlist', on_delete=django.db.models.deletion.CASCADE, to='core.genre'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='service',
            field=models.ForeignKey(blank=True, help_text='Service this playlist comes from (null for aggregate)', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.service'),
        ),
        migrations.AddField(
            model_name='historicalviewcount',
            name='service',
            field=models.ForeignKey(help_text='Service where views were counted', on_delete=django.db.models.deletion.CASCADE, to='core.service'),
        ),
        migrations.AddField(
            model_name='historicalviewcount',
            name='track',
            field=models.ForeignKey(help_text='Track these historical views belong to', on_delete=django.db.models.deletion.CASCADE, related_name='historical_views', to='core.track'),
        ),
        migrations.AddIndex(
            model_name='etlrun',
            index=models.Index(fields=['status', 'started_at'], name='etl_runs_status_fa18f0_idx'),
        ),
        migrations.AddIndex(
            model_name='etlrun',
            index=models.Index(fields=['run_type'], name='etl_runs_run_typ_6343e5_idx'),
        ),
        migrations.AddIndex(
            model_name='etlrun',
            index=models.Index(fields=['started_at'], name='etl_runs_started_41a31e_idx'),
        ),
        migrations.AddIndex(
            model_name='viewcount',
            index=models.Index(fields=['track', 'service', 'timestamp'], name='view_counts_track_i_da8da0_idx'),
        ),
        migrations.AddIndex(
            model_name='viewcount',
            index=models.Index(fields=['timestamp'], name='view_counts_timesta_71421b_idx'),
        ),
        migrations.AddIndex(
            model_name='trackplaylist',
            index=models.Index(fields=['playlist', 'rank'], name='track_playl_playlis_4ae775_idx'),
        ),
        migrations.AddIndex(
            model_name='trackplaylist',
            index=models.Index(fields=['track', 'playlist'], name='track_playl_track_i_9259f9_idx'),
        ),
        migrations.AddIndex(
            model_name='trackplaylist',
            index=models.Index(fields=['added_at'], name='track_playl_added_a_b87e51_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='trackplaylist',
            unique_together={('track', 'playlist')},
        ),
        migrations.AddIndex(
            model_name='trackdata',
            index=models.Index(fields=['track', 'service'], name='track_data_track_i_e34f57_idx'),
        ),
        migrations.AddIndex(
            model_name='trackdata',
            index=models.Index(fields=['artist_name'], name='track_data_artist__419b9a_idx'),
        ),
        migrations.AddIndex(
            model_name='trackdata',
            index=models.Index(fields=['track_name'], name='track_data_track_n_6d29f6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='trackdata',
            unique_together={('track', 'service')},
        ),
        migrations.AddIndex(
            model_name='rawplaylistdata',
            index=models.Index(fields=['genre', 'service'], name='raw_playlis_genre_i_150b29_idx'),
        ),
        migrations.AddIndex(
            model_name='rawplaylistdata',
            index=models.Index(fields=['created_at'], name='raw_playlis_created_114d4b_idx'),
        ),
        migrations.AddIndex(
            model_name='rawplaylistdata',
            index=models.Index(fields=['processed'], name='raw_playlis_process_2ec429_idx'),
        ),
        migrations.AddIndex(
            model_name='playlistmetadata',
            index=models.Index(fields=['last_updated'], name='playlist_me_last_up_20da66_idx'),
        ),
        migrations.AddIndex(
            model_name='playlist',
            index=models.Index(fields=['service', 'genre'], name='playlists_service_7e971b_idx'),
        ),
        migrations.AddIndex(
            model_name='playlist',
            index=models.Index(fields=['playlist_type'], name='playlists_playlis_3b9d06_idx'),
        ),
        migrations.AddIndex(
            model_name='playlist',
            index=models.Index(fields=['updated_at'], name='playlists_updated_b1bc7b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='playlist',
            unique_together={('service', 'genre', 'playlist_type')},
        ),
        migrations.AddIndex(
            model_name='historicalviewcount',
            index=models.Index(fields=['track', 'service', 'timestamp'], name='historical__track_i_e8ec1b_idx'),
        ),
        migrations.AddIndex(
            model_name='historicalviewcount',
            index=models.Index(fields=['timestamp'], name='historical__timesta_e5370e_idx'),
        ),
        migrations.AddIndex(
            model_name='historicalviewcount',
            index=models.Index(fields=['track', 'timestamp'], name='historical__track_i_40afbb_idx'),
        ),
    ]
