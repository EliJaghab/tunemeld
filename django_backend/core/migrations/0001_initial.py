# Generated by Django 4.2 on 2025-08-17 18:26

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name="Genre",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(help_text="Internal genre identifier (lowercase, underscores only)", max_length=50, unique=True, validators=[django.core.validators.RegexValidator("^[a-z_]+$", "Genre names must be lowercase with underscores")])),
                ("display_name", models.CharField(help_text="Human-readable genre name", max_length=100)),
            ],
            options={
                "db_table": "genres",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalViewCount",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("isrc", models.CharField(db_index=True, help_text="International Standard Recording Code (12 characters)", max_length=12, validators=[django.core.validators.RegexValidator("^[A-Z]{2}[A-Z0-9]{3}[0-9]{7}$", "Invalid ISRC format")])),
                ("view_count", models.BigIntegerField(help_text="View count at this point in time")),
                ("recorded_date", models.DateField(default=django.utils.timezone.now, help_text="Date this count was recorded")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "historical_view_counts",
            },
        ),
        migrations.CreateModel(
            name="Playlist",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("position", models.PositiveIntegerField()),
                ("isrc", models.CharField(db_index=True, help_text="International Standard Recording Code (12 characters)", max_length=12, validators=[django.core.validators.RegexValidator("^[A-Z]{2}[A-Z0-9]{3}[0-9]{7}$", "Invalid ISRC format")])),
            ],
            options={
                "db_table": "playlists",
                "ordering": ["service", "genre", "position"],
            },
        ),
        migrations.CreateModel(
            name="RawPlaylistData",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("playlist_url", models.URLField(help_text="Original playlist URL")),
                ("playlist_name", models.CharField(blank=True, help_text="Playlist display name", max_length=255)),
                ("playlist_cover_url", models.URLField(blank=True, help_text="Playlist cover image URL")),
                ("playlist_cover_description_text", models.TextField(blank=True, help_text="Cover image description")),
                ("data", models.JSONField(help_text="Raw JSON data from service API")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "raw_playlist_data",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(help_text="Internal service identifier", max_length=100, unique=True, validators=[django.core.validators.RegexValidator("^[A-Za-z][A-Za-z0-9_]*$", "Service names must be alphanumeric")])),
                ("display_name", models.CharField(help_text="Human-readable service name", max_length=100)),
            ],
            options={
                "db_table": "services",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Track",
            fields=[
                ("isrc", models.CharField(help_text="International Standard Recording Code (12 characters)", max_length=12, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator("^[A-Z]{2}[A-Z0-9]{3}[0-9]{7}$", "Invalid ISRC format")])),
                ("track_name", models.CharField(help_text="Name of the track", max_length=500)),
                ("artist_name", models.CharField(help_text="Primary artist name", max_length=500)),
                ("album_name", models.CharField(blank=True, help_text="Album name", max_length=500, null=True)),
                ("spotify_url", models.URLField(blank=True, help_text="Spotify track URL", null=True)),
                ("apple_music_url", models.URLField(blank=True, help_text="Apple Music track URL", null=True)),
                ("soundcloud_url", models.URLField(blank=True, help_text="SoundCloud track URL", null=True)),
                ("duration_ms", models.IntegerField(blank=True, help_text="Track duration in milliseconds", null=True)),
                ("preview_url", models.URLField(blank=True, help_text="Preview/sample audio URL", null=True)),
                ("album_cover_url", models.URLField(blank=True, help_text="Album cover image URL", null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "tracks",
            },
        ),
        migrations.CreateModel(
            name="ViewCount",
            fields=[
                ("isrc", models.CharField(help_text="International Standard Recording Code (12 characters)", max_length=12, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator("^[A-Z]{2}[A-Z0-9]{3}[0-9]{7}$", "Invalid ISRC format")])),
                ("view_count", models.BigIntegerField(help_text="Current view/play count")),
                ("last_updated", models.DateTimeField(help_text="When this count was last fetched")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("service", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.service")),
            ],
            options={
                "db_table": "view_counts",
            },
        ),
        migrations.AddIndex(
            model_name="track",
            index=models.Index(fields=["track_name", "artist_name"], name="tracks_track_n_cecb83_idx"),
        ),
        migrations.AddIndex(
            model_name="track",
            index=models.Index(fields=["artist_name"], name="tracks_artist__0a8ef7_idx"),
        ),
        migrations.AddField(
            model_name="rawplaylistdata",
            name="genre",
            field=models.ForeignKey(help_text="Genre of this playlist data", on_delete=django.db.models.deletion.CASCADE, to="core.genre"),
        ),
        migrations.AddField(
            model_name="rawplaylistdata",
            name="service",
            field=models.ForeignKey(help_text="Service this data came from", on_delete=django.db.models.deletion.CASCADE, to="core.service"),
        ),
        migrations.AddField(
            model_name="playlist",
            name="genre",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.genre"),
        ),
        migrations.AddField(
            model_name="playlist",
            name="service",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.service"),
        ),
        migrations.AddField(
            model_name="historicalviewcount",
            name="service",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="core.service"),
        ),
        migrations.AddIndex(
            model_name="viewcount",
            index=models.Index(fields=["service"], name="view_counts_service_3e4aa6_idx"),
        ),
        migrations.AddIndex(
            model_name="viewcount",
            index=models.Index(fields=["last_updated"], name="view_counts_last_up_0540eb_idx"),
        ),
        migrations.AddIndex(
            model_name="viewcount",
            index=models.Index(fields=["view_count"], name="view_counts_view_co_2e64d3_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="viewcount",
            unique_together={("isrc", "service")},
        ),
        migrations.AddIndex(
            model_name="rawplaylistdata",
            index=models.Index(fields=["genre", "service"], name="raw_playlis_genre_i_150b29_idx"),
        ),
        migrations.AddIndex(
            model_name="rawplaylistdata",
            index=models.Index(fields=["created_at"], name="raw_playlis_created_114d4b_idx"),
        ),
        migrations.AddIndex(
            model_name="rawplaylistdata",
            index=models.Index(fields=["playlist_url"], name="raw_playlis_playlis_a02f88_idx"),
        ),
        migrations.AddIndex(
            model_name="playlist",
            index=models.Index(fields=["service", "genre"], name="playlists_service_7e971b_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="playlist",
            unique_together={("service", "genre", "position")},
        ),
        migrations.AddIndex(
            model_name="historicalviewcount",
            index=models.Index(fields=["service", "recorded_date"], name="historical__service_b9ee87_idx"),
        ),
        migrations.AddIndex(
            model_name="historicalviewcount",
            index=models.Index(fields=["recorded_date"], name="historical__recorde_686e9a_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="historicalviewcount",
            unique_together={("isrc", "service", "recorded_date")},
        ),
    ]
