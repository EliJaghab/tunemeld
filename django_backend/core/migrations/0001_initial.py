# Generated by Django 5.2.5 on 2025-08-13 16:58

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Internal genre identifier (lowercase, underscores only)', max_length=50, unique=True, validators=[django.core.validators.RegexValidator('^[a-z_]+$', 'Genre names must be lowercase with underscores')])),
                ('display_name', models.CharField(help_text='Human-readable genre name', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'genres',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Internal service identifier', max_length=100, unique=True, validators=[django.core.validators.RegexValidator('^[A-Za-z][A-Za-z0-9_]*$', 'Service names must be alphanumeric')])),
                ('display_name', models.CharField(help_text='Human-readable service name', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'services',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('playlist_type', models.CharField(choices=[('service', 'Service-specific playlist'), ('aggregate', 'Cross-service aggregate playlist')], default='service', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('genre', models.ForeignKey(help_text='Genre of this playlist', on_delete=django.db.models.deletion.CASCADE, to='core.genre')),
                ('service', models.ForeignKey(blank=True, help_text='Service (null for aggregate playlists)', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.service')),
            ],
            options={
                'db_table': 'playlists',
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('track_name', models.CharField(help_text='Name of the track', max_length=500)),
                ('artist_name', models.CharField(help_text='Primary artist name', max_length=500)),
                ('isrc', models.CharField(blank=True, help_text='International Standard Recording Code (12 characters)', max_length=12, validators=[django.core.validators.RegexValidator('^[A-Z]{2}[A-Z0-9]{3}[0-9]{7}$', 'Invalid ISRC format')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'tracks',
                'indexes': [models.Index(fields=['isrc'], name='tracks_isrc_426685_idx'), models.Index(fields=['track_name', 'artist_name'], name='tracks_track_n_cecb83_idx'), models.Index(fields=['artist_name'], name='tracks_artist__0a8ef7_idx')],
                'unique_together': {('track_name', 'artist_name')},
            },
        ),
        migrations.CreateModel(
            name='TrackPlaylist',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('position', models.IntegerField(help_text='Position in playlist (1-based)')),
                ('score', models.FloatField(blank=True, help_text='Calculated score for ranking (higher = better)', null=True)),
                ('view_count_contribution', models.BigIntegerField(blank=True, help_text='View count used in score calculation', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.playlist')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.track')),
            ],
            options={
                'db_table': 'track_playlists',
                'ordering': ['position'],
            },
        ),
        migrations.AddField(
            model_name='playlist',
            name='tracks',
            field=models.ManyToManyField(related_name='playlists', through='core.TrackPlaylist', to='core.track'),
        ),
        migrations.CreateModel(
            name='ViewCount',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('view_count', models.BigIntegerField(help_text='Current view/play count')),
                ('last_updated', models.DateTimeField(help_text='When this count was last fetched')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.service')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='view_counts', to='core.track')),
            ],
            options={
                'db_table': 'view_counts',
            },
        ),
        migrations.CreateModel(
            name='PlaylistMetadata',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('total_tracks', models.IntegerField(default=0, help_text='Current number of tracks in playlist')),
                ('last_updated', models.DateTimeField(help_text='When playlist was last updated')),
                ('update_frequency_hours', models.IntegerField(default=24, help_text='How often this playlist should be updated (hours)')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this playlist is actively maintained')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('playlist', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='core.playlist')),
            ],
            options={
                'db_table': 'playlist_metadata',
                'indexes': [models.Index(fields=['last_updated'], name='playlist_me_last_up_20da66_idx')],
            },
        ),
        migrations.CreateModel(
            name='RawPlaylistData',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('playlist_url', models.URLField(help_text='Original playlist URL')),
                ('playlist_name', models.CharField(blank=True, help_text='Playlist display name', max_length=255)),
                ('playlist_cover_url', models.URLField(blank=True, help_text='Playlist cover image URL')),
                ('playlist_cover_description_text', models.TextField(blank=True, help_text='Cover image description')),
                ('data', models.JSONField(help_text='Raw JSON data from service API')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('genre', models.ForeignKey(help_text='Genre of this playlist data', on_delete=django.db.models.deletion.CASCADE, to='core.genre')),
                ('service', models.ForeignKey(help_text='Service this data came from', on_delete=django.db.models.deletion.CASCADE, to='core.service')),
            ],
            options={
                'db_table': 'raw_playlist_data',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['genre', 'service'], name='raw_playlis_genre_i_150b29_idx'), models.Index(fields=['created_at'], name='raw_playlis_created_114d4b_idx'), models.Index(fields=['playlist_url'], name='raw_playlis_playlis_a02f88_idx')],
            },
        ),
        migrations.CreateModel(
            name='HistoricalViewCount',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('view_count', models.BigIntegerField(help_text='View count at this point in time')),
                ('recorded_date', models.DateField(default=django.utils.timezone.now, help_text='Date this count was recorded')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.service')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historical_view_counts', to='core.track')),
            ],
            options={
                'db_table': 'historical_view_counts',
                'indexes': [models.Index(fields=['track', 'service', 'recorded_date'], name='historical__track_i_e54c70_idx'), models.Index(fields=['recorded_date'], name='historical__recorde_686e9a_idx')],
                'unique_together': {('track', 'service', 'recorded_date')},
            },
        ),
        migrations.CreateModel(
            name='TrackData',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('service_track_id', models.CharField(help_text='Track ID on the service', max_length=100)),
                ('service_url', models.URLField(blank=True, help_text='Direct URL to track on service')),
                ('duration_ms', models.IntegerField(blank=True, help_text='Track duration in milliseconds', null=True)),
                ('popularity_score', models.IntegerField(blank=True, help_text='Service-specific popularity score', null=True)),
                ('preview_url', models.URLField(blank=True, help_text='Preview/sample audio URL')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.service')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='track_data', to='core.track')),
            ],
            options={
                'db_table': 'track_data',
                'indexes': [models.Index(fields=['service', 'service_track_id'], name='track_data_service_f8e70f_idx'), models.Index(fields=['track', 'service'], name='track_data_track_i_e34f57_idx')],
                'unique_together': {('track', 'service')},
            },
        ),
        migrations.AddIndex(
            model_name='trackplaylist',
            index=models.Index(fields=['playlist', 'position'], name='track_playl_playlis_064571_idx'),
        ),
        migrations.AddIndex(
            model_name='trackplaylist',
            index=models.Index(fields=['track'], name='track_playl_track_i_92064f_idx'),
        ),
        migrations.AddIndex(
            model_name='trackplaylist',
            index=models.Index(fields=['score'], name='track_playl_score_b1e162_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='trackplaylist',
            unique_together={('track', 'playlist')},
        ),
        migrations.AddIndex(
            model_name='playlist',
            index=models.Index(fields=['genre', 'playlist_type'], name='playlists_genre_i_f520bc_idx'),
        ),
        migrations.AddIndex(
            model_name='playlist',
            index=models.Index(fields=['service', 'genre'], name='playlists_service_7e971b_idx'),
        ),
        migrations.AddIndex(
            model_name='playlist',
            index=models.Index(fields=['updated_at'], name='playlists_updated_b1bc7b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='playlist',
            unique_together={('service', 'genre')},
        ),
        migrations.AddIndex(
            model_name='viewcount',
            index=models.Index(fields=['track', 'service'], name='view_counts_track_i_a9fe8f_idx'),
        ),
        migrations.AddIndex(
            model_name='viewcount',
            index=models.Index(fields=['last_updated'], name='view_counts_last_up_0540eb_idx'),
        ),
        migrations.AddIndex(
            model_name='viewcount',
            index=models.Index(fields=['view_count'], name='view_counts_view_co_2e64d3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='viewcount',
            unique_together={('track', 'service')},
        ),
    ]
