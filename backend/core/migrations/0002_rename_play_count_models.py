# Generated by Django 4.2.24 on 2025-09-30 22:30

import django.core.validators
from django.db import migrations, models, connection
import django.db.models.deletion
import django.utils.timezone


def check_table_exists(table_name):
    """Check if a table exists in the database"""
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT COUNT(*)
            FROM information_schema.tables
            WHERE table_name = %s
        """, [table_name])
        return cursor.fetchone()[0] > 0


class SafeCreateModel(migrations.CreateModel):
    """Custom CreateModel operation that checks if table exists first"""

    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        table_name = self.options.get('db_table')
        if table_name and check_table_exists(table_name):
            # Table already exists, skip creation
            return
        # Table doesn't exist, proceed with normal creation
        super().database_forwards(app_label, schema_editor, from_state, to_state)


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0001_initial"),
    ]

    operations = [
        SafeCreateModel(
            name="AggregatePlayCountModel",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "isrc",
                    models.CharField(
                        db_index=True,
                        help_text="International Standard Recording Code (12 characters)",
                        max_length=12,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Z]{2}[A-Z0-9]{3}[0-9]{7}$", "Invalid ISRC format"
                            )
                        ],
                    ),
                ),
                (
                    "current_play_count",
                    models.BigIntegerField(
                        help_text="Current play count for this service (or total for 'all' service)"
                    ),
                ),
                (
                    "weekly_change",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Absolute change from one week ago",
                        null=True,
                    ),
                ),
                (
                    "weekly_change_percentage",
                    models.FloatField(
                        blank=True,
                        help_text="Percentage change from one week ago",
                        null=True,
                    ),
                ),
                (
                    "recorded_date",
                    models.DateField(
                        db_index=True,
                        default=django.utils.timezone.now,
                        help_text="Date this aggregate was calculated",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "service",
                    models.ForeignKey(
                        help_text="Service for this play count record (individual service or 'all' for aggregated)",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.servicemodel",
                    ),
                ),
            ],
            options={
                "db_table": "aggregate_play_counts",
            },
        ),
        SafeCreateModel(
            name="HistoricalTrackPlayCountModel",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "isrc",
                    models.CharField(
                        db_index=True,
                        help_text="International Standard Recording Code (12 characters)",
                        max_length=12,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Z]{2}[A-Z0-9]{3}[0-9]{7}$", "Invalid ISRC format"
                            )
                        ],
                    ),
                ),
                (
                    "current_play_count",
                    models.BigIntegerField(
                        help_text="Raw play count at this point in time"
                    ),
                ),
                (
                    "recorded_date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        help_text="Date this count was recorded",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.servicemodel",
                    ),
                ),
            ],
            options={
                "db_table": "historical_track_play_counts",
            },
        ),
        migrations.AlterUniqueTogether(
            name="historicaltrackplaycount",
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name="historicaltrackplaycount",
            name="service",
        ),
        migrations.DeleteModel(
            name="AggregatePlayCount",
        ),
        migrations.DeleteModel(
            name="HistoricalTrackPlayCount",
        ),
        migrations.AddIndex(
            model_name="historicaltrackplaycountmodel",
            index=models.Index(
                fields=["service", "recorded_date"],
                name="historical__service_1f53e4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="historicaltrackplaycountmodel",
            index=models.Index(
                fields=["recorded_date"], name="historical__recorde_4937f6_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="historicaltrackplaycountmodel",
            unique_together={("isrc", "service", "recorded_date")},
        ),
        migrations.AddIndex(
            model_name="aggregateplaycountmodel",
            index=models.Index(
                fields=["service", "isrc", "recorded_date"],
                name="aggregate_p_service_e361b0_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aggregateplaycountmodel",
            index=models.Index(
                fields=["recorded_date"], name="aggregate_p_recorde_24dc43_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aggregateplaycountmodel",
            index=models.Index(
                fields=["isrc", "recorded_date"], name="aggregate_p_isrc_e04f86_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="aggregateplaycountmodel",
            unique_together={("service", "isrc", "recorded_date")},
        ),
    ]
