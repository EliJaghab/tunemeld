# Build Python 3.13 on pure Debian base (avoids Docker Hub python: namespace)
FROM debian:bookworm-slim

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DJANGO_SETTINGS_MODULE=core.settings

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libssl-dev \
    zlib1g-dev \
    libncurses5-dev \
    libncursesw5-dev \
    libreadline-dev \
    libsqlite3-dev \
    libgdbm-dev \
    libdb5.3-dev \
    libbz2-dev \
    libexpat1-dev \
    liblzma-dev \
    libffi-dev \
    wget \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Python 3.13 from source
RUN cd /tmp && \
    wget https://www.python.org/ftp/python/3.13.0/Python-3.13.0.tgz && \
    tar xzf Python-3.13.0.tgz && \
    cd Python-3.13.0 && \
    ./configure --enable-optimizations --with-ensurepip=install && \
    make -j $(nproc) && \
    make altinstall && \
    ln -sf /usr/local/bin/python3.13 /usr/local/bin/python && \
    ln -sf /usr/local/bin/python3.13 /usr/local/bin/python3 && \
    ln -sf /usr/local/bin/pip3.13 /usr/local/bin/pip && \
    cd / && rm -rf /tmp/Python-3.13.0* && \
    apt-get purge -y build-essential wget && \
    apt-get autoremove -y && \
    apt-get clean

# Verify Python installation
RUN python --version && pip --version

WORKDIR /app

# Copy pyproject.toml first for better Docker layer caching
COPY pyproject.toml /app/pyproject.toml

# Install Python dependencies
RUN pip install --upgrade pip && pip install -e .

# Copy Django backend files to container
COPY backend/ /app/
COPY .github/ /app/.github/

# Set Python path for Django
ENV PYTHONPATH=/app

# Expose port 8080 (matches Railway configuration)
EXPOSE 8080

# Start Django server
CMD ["gunicorn", "--bind", "0.0.0.0:8080", "core.wsgi:application"]
