# Generated by Django 4.2.24 on 2025-09-30 18:34

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies: list[tuple[str, str]] = []

    operations = [
        migrations.CreateModel(
            name="AggregatePlayCount",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "isrc",
                    models.CharField(
                        db_index=True,
                        help_text="International Standard Recording Code (12 characters)",
                        max_length=12,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Z]{2}[A-Z0-9]{3}[0-9]{7}$", "Invalid ISRC format"
                            )
                        ],
                    ),
                ),
                (
                    "current_play_count",
                    models.BigIntegerField(
                        help_text="Current play count for this service (or total for 'all' service)"
                    ),
                ),
                (
                    "weekly_change",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Absolute change from one week ago",
                        null=True,
                    ),
                ),
                (
                    "weekly_change_percentage",
                    models.FloatField(
                        blank=True,
                        help_text="Percentage change from one week ago",
                        null=True,
                    ),
                ),
                (
                    "recorded_date",
                    models.DateField(
                        db_index=True,
                        default=django.utils.timezone.now,
                        help_text="Date this aggregate was calculated",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "aggregate_play_counts",
            },
        ),
        migrations.CreateModel(
            name="GenreModel",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "name",
                    models.CharField(
                        help_text="Internal genre identifier (lowercase, underscores only)",
                        max_length=50,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[a-z_]+$",
                                "Genre names must be lowercase with underscores",
                            )
                        ],
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        help_text="Human-readable genre name", max_length=100
                    ),
                ),
                (
                    "icon_class",
                    models.CharField(
                        help_text="CSS class for genre icon", max_length=50
                    ),
                ),
                ("icon_url", models.CharField(max_length=200)),
            ],
            options={
                "db_table": "genres",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalTrackPlayCount",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "isrc",
                    models.CharField(
                        db_index=True,
                        help_text="International Standard Recording Code (12 characters)",
                        max_length=12,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Z]{2}[A-Z0-9]{3}[0-9]{7}$", "Invalid ISRC format"
                            )
                        ],
                    ),
                ),
                (
                    "current_play_count",
                    models.BigIntegerField(
                        help_text="Raw play count at this point in time"
                    ),
                ),
                (
                    "recorded_date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        help_text="Date this count was recorded",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "historical_track_play_counts",
            },
        ),
        migrations.CreateModel(
            name="PlaylistModel",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("position", models.PositiveIntegerField()),
                (
                    "isrc",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="International Standard Recording Code (12 characters)",
                        max_length=12,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Z]{2}[A-Z0-9]{3}[0-9]{7}$", "Invalid ISRC format"
                            )
                        ],
                    ),
                ),
            ],
            options={
                "db_table": "playlists",
                "ordering": ["service", "genre", "position"],
            },
        ),
        migrations.CreateModel(
            name="RankModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("display_name", models.CharField(max_length=100)),
                ("sort_field", models.CharField(max_length=50)),
                (
                    "sort_order",
                    models.CharField(
                        choices=[("asc", "Ascending"), ("desc", "Descending")],
                        default="asc",
                        max_length=4,
                    ),
                ),
                (
                    "data_field",
                    models.CharField(
                        default="rank",
                        help_text="Exact field name in track data (e.g., 'rank', 'spotifyCurrentViewCount')",
                        max_length=50,
                    ),
                ),
                (
                    "icon_class",
                    models.CharField(
                        help_text="CSS class for rank icon", max_length=50
                    ),
                ),
            ],
            options={
                "db_table": "ranks",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="RawPlaylistDataModel",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("playlist_url", models.URLField(help_text="Original playlist URL")),
                (
                    "playlist_name",
                    models.CharField(
                        blank=True, help_text="Playlist display name", max_length=255
                    ),
                ),
                (
                    "playlist_cover_url",
                    models.URLField(blank=True, help_text="Playlist cover image URL"),
                ),
                (
                    "playlist_cover_description_text",
                    models.TextField(blank=True, help_text="Cover image description"),
                ),
                ("data", models.JSONField(help_text="Raw JSON data from service API")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "raw_playlist_data",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ServiceModel",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "name",
                    models.CharField(
                        help_text="Internal service identifier",
                        max_length=100,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Za-z][A-Za-z0-9_]*$",
                                "Service names must be alphanumeric",
                            )
                        ],
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        help_text="Human-readable service name", max_length=100
                    ),
                ),
                (
                    "icon_url",
                    models.CharField(
                        default="",
                        help_text="URL to service icon image",
                        max_length=200,
                    ),
                ),
            ],
            options={
                "db_table": "services",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ServiceTrackModel",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "position",
                    models.PositiveIntegerField(help_text="Position in playlist"),
                ),
                (
                    "track_name",
                    models.CharField(help_text="Name of the track", max_length=500),
                ),
                (
                    "artist_name",
                    models.CharField(help_text="Primary artist name", max_length=500),
                ),
                (
                    "album_name",
                    models.CharField(
                        blank=True, help_text="Album name", max_length=500, null=True
                    ),
                ),
                (
                    "service_url",
                    models.URLField(help_text="Service-specific track URL"),
                ),
                (
                    "isrc",
                    models.CharField(
                        help_text="International Standard Recording Code (12 characters)",
                        max_length=12,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Z]{2}[A-Z0-9]{3}[0-9]{7}$", "Invalid ISRC format"
                            )
                        ],
                    ),
                ),
                (
                    "album_cover_url",
                    models.URLField(
                        blank=True, help_text="Album cover image URL", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "service_tracks",
            },
        ),
        migrations.CreateModel(
            name="TrackModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "isrc",
                    models.CharField(
                        help_text="International Standard Recording Code (12 characters)",
                        max_length=12,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Z]{2}[A-Z0-9]{3}[0-9]{7}$", "Invalid ISRC format"
                            )
                        ],
                    ),
                ),
                (
                    "track_name",
                    models.CharField(help_text="Name of the track", max_length=500),
                ),
                (
                    "artist_name",
                    models.CharField(help_text="Primary artist name", max_length=500),
                ),
                (
                    "album_name",
                    models.CharField(
                        blank=True, help_text="Album name", max_length=500, null=True
                    ),
                ),
                (
                    "spotify_url",
                    models.URLField(
                        blank=True, help_text="Spotify track URL", null=True
                    ),
                ),
                (
                    "apple_music_url",
                    models.URLField(
                        blank=True, help_text="Apple Music track URL", null=True
                    ),
                ),
                (
                    "youtube_url",
                    models.URLField(
                        blank=True, help_text="YouTube track URL", null=True
                    ),
                ),
                (
                    "soundcloud_url",
                    models.URLField(
                        blank=True, help_text="SoundCloud track URL", null=True
                    ),
                ),
                (
                    "album_cover_url",
                    models.URLField(
                        blank=True, help_text="Album cover image URL", null=True
                    ),
                ),
                (
                    "aggregate_rank",
                    models.IntegerField(
                        blank=True,
                        help_text="Cross-service aggregate ranking",
                        null=True,
                    ),
                ),
                (
                    "aggregate_score",
                    models.FloatField(
                        blank=True, help_text="Cross-service aggregate score", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "tracks",
                "indexes": [
                    models.Index(
                        fields=["track_name", "artist_name"],
                        name="tracks_track_n_cecb83_idx",
                    ),
                    models.Index(
                        fields=["artist_name"], name="tracks_artist__0a8ef7_idx"
                    ),
                    models.Index(fields=["isrc"], name="tracks_isrc_426685_idx"),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="trackmodel",
            constraint=models.UniqueConstraint(
                fields=("isrc",), name="unique_track_isrc"
            ),
        ),
        migrations.AddField(
            model_name="servicetrackmodel",
            name="genre",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.genremodel"
            ),
        ),
        migrations.AddField(
            model_name="servicetrackmodel",
            name="service",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.servicemodel"
            ),
        ),
        migrations.AddField(
            model_name="servicetrackmodel",
            name="track",
            field=models.ForeignKey(
                blank=True,
                help_text="Reference to consolidated TrackModel record",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="service_tracks",
                to="core.trackmodel",
            ),
        ),
        migrations.AddIndex(
            model_name="servicemodel",
            index=models.Index(fields=["name"], name="services_name_a79f61_idx"),
        ),
        migrations.AddConstraint(
            model_name="servicemodel",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_service_name"
            ),
        ),
        migrations.AddField(
            model_name="rawplaylistdatamodel",
            name="genre",
            field=models.ForeignKey(
                help_text="Genre of this playlist data",
                on_delete=django.db.models.deletion.CASCADE,
                to="core.genremodel",
            ),
        ),
        migrations.AddField(
            model_name="rawplaylistdatamodel",
            name="service",
            field=models.ForeignKey(
                help_text="Service this data came from",
                on_delete=django.db.models.deletion.CASCADE,
                to="core.servicemodel",
            ),
        ),
        migrations.AddIndex(
            model_name="rankmodel",
            index=models.Index(fields=["name"], name="ranks_name_08e251_idx"),
        ),
        migrations.AddConstraint(
            model_name="rankmodel",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_rank_name"
            ),
        ),
        migrations.AddField(
            model_name="playlistmodel",
            name="genre",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.genremodel"
            ),
        ),
        migrations.AddField(
            model_name="playlistmodel",
            name="service",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.servicemodel"
            ),
        ),
        migrations.AddField(
            model_name="playlistmodel",
            name="service_track",
            field=models.ForeignKey(
                help_text="Reference to the normalized service track record",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="playlists",
                to="core.servicetrackmodel",
            ),
        ),
        migrations.AddField(
            model_name="historicaltrackplaycount",
            name="service",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="core.servicemodel"
            ),
        ),
        migrations.AddIndex(
            model_name="genremodel",
            index=models.Index(fields=["name"], name="genres_name_4778a7_idx"),
        ),
        migrations.AddConstraint(
            model_name="genremodel",
            constraint=models.UniqueConstraint(
                fields=("name",), name="unique_genre_name"
            ),
        ),
        migrations.AddField(
            model_name="aggregateplaycount",
            name="service",
            field=models.ForeignKey(
                help_text="Service for this play count record (individual service or 'all' for aggregated)",
                on_delete=django.db.models.deletion.CASCADE,
                to="core.servicemodel",
            ),
        ),
        migrations.AddIndex(
            model_name="servicetrackmodel",
            index=models.Index(
                fields=["service", "genre"], name="service_tra_service_96adaf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servicetrackmodel",
            index=models.Index(fields=["isrc"], name="service_tra_isrc_256b90_idx"),
        ),
        migrations.AddIndex(
            model_name="servicetrackmodel",
            index=models.Index(
                fields=["track_name", "artist_name"],
                name="service_tra_track_n_45500e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="servicetrackmodel",
            index=models.Index(
                fields=["service", "isrc"], name="service_tra_service_64f0ba_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="servicetrackmodel",
            constraint=models.UniqueConstraint(
                fields=("service", "genre", "position"),
                name="unique_service_track_position",
            ),
        ),
        migrations.AddIndex(
            model_name="rawplaylistdatamodel",
            index=models.Index(
                fields=["genre", "service"], name="raw_playlis_genre_i_150b29_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="rawplaylistdatamodel",
            index=models.Index(
                fields=["created_at"], name="raw_playlis_created_114d4b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="rawplaylistdatamodel",
            index=models.Index(
                fields=["playlist_url"], name="raw_playlis_playlis_a02f88_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="rawplaylistdatamodel",
            constraint=models.UniqueConstraint(
                fields=("service", "genre"), name="unique_raw_playlist_service_genre"
            ),
        ),
        migrations.AddIndex(
            model_name="playlistmodel",
            index=models.Index(
                fields=["service", "genre"], name="playlists_service_7e971b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="playlistmodel",
            index=models.Index(fields=["isrc"], name="playlists_isrc_f1b2fb_idx"),
        ),
        migrations.AddConstraint(
            model_name="playlistmodel",
            constraint=models.UniqueConstraint(
                fields=("service", "genre", "position"), name="unique_playlist_position"
            ),
        ),
        migrations.AddIndex(
            model_name="historicaltrackplaycount",
            index=models.Index(
                fields=["service", "recorded_date"],
                name="historical__service_1f53e4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="historicaltrackplaycount",
            index=models.Index(
                fields=["recorded_date"], name="historical__recorde_4937f6_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="historicaltrackplaycount",
            unique_together={("isrc", "service", "recorded_date")},
        ),
        migrations.AddIndex(
            model_name="aggregateplaycount",
            index=models.Index(
                fields=["service", "isrc", "recorded_date"],
                name="aggregate_p_service_e361b0_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aggregateplaycount",
            index=models.Index(
                fields=["recorded_date"], name="aggregate_p_recorde_24dc43_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aggregateplaycount",
            index=models.Index(
                fields=["isrc", "recorded_date"], name="aggregate_p_isrc_e04f86_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="aggregateplaycount",
            unique_together={("service", "isrc", "recorded_date")},
        ),
    ]
